train_dataset:
  module: torchvision.datasets
  class: CIFAR10
  CIFAR10:
    root: '''dataset'''
    train: True
    download: True
    transform:
      - 'torchvision.transforms.ToTensor()'
      - 'torchvision.transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])'
      - 'torchvision.transforms.Resize(size=224)'

train_loader:
  module: torch.utils.data
  class: DataLoader
  DataLoader:
    shuffle: True
    batch_size: 64

valid_dataset:
  module: torchvision.datasets
  class: CIFAR10
  CIFAR10:
    root: '''dataset'''
    train: False
    download: True
    transform:
      - 'torchvision.transforms.ToTensor()'
      - 'torchvision.transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])'
      - 'torchvision.transforms.Resize(size=224)'

valid_loader:
  module: torch.utils.data
  class: DataLoader
  DataLoader:
    shuffle: False
    batch_size: 64

data_loader:
  module: dataset.cifar10
  class: Cifar10

model:
  module: model.mobilenet_v2 
  class: MobileNetV2
  MobileNetV2:
    num_classes: 10

optimizer:
  module: torch.optim
  class: SGD
  SGD:
    lr: 0.05
    momentum: 0.92
    weight_decay: 0.00001

lr_scheduler:
  module: torch.optim.lr_scheduler
  class: ReduceLROnPlateau
  ReduceLROnPlateau:
    factor: 0.1
    patience: 5
    verbose: True

criterion:
  module: torch.nn
  class: CrossEntropyLoss

early_stopping:
  module: early_stopping.early_stopping
  class: EarlyStopping
  EarlyStopping:
    mode: '''min'''
    patience: 10
    verbose: False
    delta: 0
    path: '''weights/mobile_net_v2.pth'''

trainer:
  module: engine.engine
  class: TrainEpoch

evaluator:
  module: engine.engine
  class: EvalEpoch    
